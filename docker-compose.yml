version: "3"

services:

  ###############################
  # microwebservices-varnish est le conteneur
  # chargé de prendre en entrée toutes les requêtes
  # et de mettre en cache le contenu après avoir 
  # demandé au conteneur microwebservice-api de lui
  # donner le contenu.
  microwebservices-varnish:
    build: ./images/microwebservices-varnish/
    image: microwebservices-varnish:7.0.2
    container_name: microwebservices-varnish
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    ports:
      - ${MICROWEBSERVICE_VARNISH_HTTP_PORT}:80
    volumes:
      - ./volumes/microwebservices-varnish/:/var/lib/varnish/
    environment:
      VARNISH_STORAGE_BACKEND: "file,/var/lib/varnish/file-cache.bin,${MICROWEBSERVICE_CACHE_SIZE}"
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=microwebservices"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=varnish"



  ###############################
  # microwebservices-api est le conteneur
  # qui implémente les microwebservices écrits en JAVA
  # et qui interroge la base XML pour obtenir les données à retourner
  # A noter que parmis les microwebservices, il y a les packages KBART de BACON
  microwebservices-api:
    build: ./images/microwebservices-api/
    image: microwebservices-api:0.0.1-SNAPSHOT
    container_name: microwebservices-api
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    ports:
      - ${MICROWEBSERVICE_HTTP_PORT}:8080
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s 'http://localhost:8080/MicroWebServices/?servicekey=biblio&ppn=145561143&format=application/xml' | grep -q 'www.sudoc.fr'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=microwebservices"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=java"



  ###############################
  # bacon-cache-warmer est le conteneur
  # qui implémente le chauffeur de cache
  # des packages KBART de BACON
  # cf https://github.com/abes-esr/bacon-cache-warmer-docker#readme
  # ----
  # ci-dessous pour chauffer que les KBART non datés
  bacon-cache-warmer-kbart-withoutdate:
    image: abesesr/bacon-cache-warmer:1.3.1
    container_name: bacon-cache-warmer-kbart-withoutdate
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    environment:
      BACON_RSS_URL: 'http://microwebservices-api:8080/MicroWebServices/?servicekey=bacon_rss&format=application/xml'
      BACON_MAX_URL_TO_WARM: ${BACON_MAX_URL_TO_WARM}
      BACON_DELAY_BETWEEN_WARM: ${BACON_DELAY_BETWEEN_WARM}
      BACON_CACHEWARMER_CRON: ${BACON_CACHEWARMER_CRON}
      BACON_CACHEWARMER_RUN_AT_STARTUP: ${BACON_CACHEWARMER_RUN_AT_STARTUP}
      BACON_CACHEWARMER_JUST_ONCE: ${BACON_CACHEWARMER_JUST_ONCE}
      # SED pour chauffer que les KBART non datés
      BACON_URL_SED_BEFORE_WARM: 's#http://bacon.abes.fr/package2kbart/\([A-Z_\-]\+\)\(_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)#http://microwebservices-varnish:80/MicroWebServices/?servicekey=bacon_pck2kbart\&para1=\1\&para2=\1\&para3=\1\&format=application/vnd.ms-excel#g'
    depends_on:
      microwebservices-varnish:
        condition: service_started
      microwebservices-api:
        condition: service_healthy
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=microwebservices"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=adhoc"
  # ----
  # ci-dessous pour chauffer les KBART datés
  bacon-cache-warmer-kbart-withdate:
    image: abesesr/bacon-cache-warmer:1.3.1
    container_name: bacon-cache-warmer-kbart-withdate
    restart: unless-stopped
    mem_limit: ${MEM_LIMIT}
    environment:
      BACON_RSS_URL: 'http://microwebservices-api:8080/MicroWebServices/?servicekey=bacon_rss&format=application/xml'
      BACON_MAX_URL_TO_WARM: ${BACON_MAX_URL_TO_WARM}
      BACON_DELAY_BETWEEN_WARM: ${BACON_DELAY_BETWEEN_WARM}
      BACON_CACHEWARMER_CRON: ${BACON_CACHEWARMER_CRON}
      BACON_CACHEWARMER_RUN_AT_STARTUP: ${BACON_CACHEWARMER_RUN_AT_STARTUP}
      BACON_CACHEWARMER_JUST_ONCE: ${BACON_CACHEWARMER_JUST_ONCE}
      # SED pour chauffer tous les KBART (avec des dates)
      BACON_URL_SED_BEFORE_WARM: 's#http://bacon.abes.fr/package2kbart/\(.*\)#http://microwebservices-varnish:80/MicroWebServices/?servicekey=bacon_pck2kbart\&para1=\1\&para2=\1\&para3=\1\&format=application/vnd.ms-excel#g'
    depends_on:
      microwebservices-varnish:
        condition: service_started
      microwebservices-api:
        condition: service_healthy
    labels:
      # pour envoyer les logs dans le puits de log de l'abes
      - "co.elastic.logs/enabled=true"
      - "co.elastic.logs/processors.add_fields.target="
      - "co.elastic.logs/processors.add_fields.fields.abes_appli=microwebservices"
      - "co.elastic.logs/processors.add_fields.fields.abes_middleware=adhoc"
